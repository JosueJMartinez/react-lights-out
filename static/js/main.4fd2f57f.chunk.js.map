{"version":3,"sources":["js/componets/Cell.jsx","js/componets/Board.jsx","js/App.jsx","serviceWorker.js","index.js"],"names":["Cell","props","handleClick","bind","evt","console","log","target","this","flipCellsAroundMe","id","classes","isLit","className","onClick","Component","Board","createBoard","board","i","nrows","r","ncols","push","Math","random","chanceLightStartsOn","flipCellsAround","coord","state","split","map","Number","y","x","flipCell","setState","hasWon","some","row","includes","handleFlips","idxY","key","cell","idxX","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAyCeA,G,wDAxBd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,YAAc,EAAKA,YAAYC,KAAjB,gBAFD,E,wDAKPC,GAEXC,QAAQC,IAAIF,EAAIG,QAChBC,KAAKP,MAAMQ,kBAAkBL,EAAIG,OAAOG,M,+BAIxC,IAAIC,EAAU,QAAUH,KAAKP,MAAMW,MAAQ,YAAc,IAEzD,OACC,wBACCF,GAAIF,KAAKP,MAAMS,GACfG,UAAWF,EACXG,QAASN,KAAKN,kB,GAnBCa,cCcEC,G,wDAMpB,WAAYf,GAAQ,IAAD,8BAClB,cAAMA,IASPgB,YAAc,WAEb,IADA,IAAIC,EAAQ,GACHC,EAAI,EAAGA,EAAI,EAAKlB,MAAMmB,MAAOD,IAAK,CAE1C,IADA,IAAIE,EAAI,GACCF,EAAI,EAAGA,EAAI,EAAKlB,MAAMqB,MAAOH,IACrCE,EAAEE,KAAKC,KAAKC,SAAW,EAAKxB,MAAMyB,qBAEnCR,EAAMK,KAAKF,GAEZ,OAAOH,GAnBW,EAwBnBS,gBAAkB,SAAAC,GAAU,IAAD,EACH,EAAK3B,MAAtBqB,EADoB,EACpBA,MAAOF,EADa,EACbA,MACTF,EAAQ,EAAKW,MAAMX,MAFG,EAGXU,EAAME,MAAM,KAAKC,IAAIC,QAHV,mBAGpBC,EAHoB,KAGjBC,EAHiB,KAK1B,SAASC,EAASF,EAAGC,GAGhBA,GAAK,GAAKA,EAAIZ,GAASW,GAAK,GAAKA,EAAIb,IACxCF,EAAMe,GAAGC,IAAMhB,EAAMe,GAAGC,IAG1BC,EAASF,EAAGC,GACZC,EAASF,EAAI,EAAGC,GAChBC,EAASF,EAAI,EAAGC,GAChBC,EAASF,EAAGC,EAAI,GAChBC,EAASF,EAAGC,EAAI,GAChB,EAAKE,SAAS,CACblB,QACAmB,QAASnB,EAAMoB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAS,SA3CvB,EAsDnBC,YAAc,SAAAb,GACb,EAAKD,gBAAgBC,IApDrB,EAAKC,MAAQ,CACZQ,QAAQ,EACRnB,MAAO,EAAKD,eALK,E,qDA4DT,IAAD,OACR,OACC,6BACET,KAAKqB,MAAMQ,OACX,4BACE,IACD,0BAAMxB,UAAU,eAAhB,OAAyC,IACzC,0BAAMA,UAAU,aAAhB,OAAuC,KAGxC,6BACC,6BACC,0BAAMA,UAAU,eAAhB,UACA,0BAAMA,UAAU,aAAhB,QAGD,2BAAOA,UAAU,SAChB,+BACEL,KAAKqB,MAAMX,MAAMa,KAAI,SAACV,EAAGqB,GAAJ,OACrB,wBAAIC,IAAKD,GACPrB,EAAEU,KAAI,SAACa,EAAMC,GAAP,OACN,kBAAC,EAAD,CACCF,IAAG,UAAKD,EAAL,YAAaG,GAChBnC,GAAE,UAAKgC,EAAL,YAAaG,GACfjC,MAAOgC,EACPnC,kBAAmB,EAAKgC,6B,GA3FD1B,cAAdC,EACb8B,aAAe,CACrB1B,MAAO,EACPE,MAAO,EACPI,oBAAqB,K,ICjBRqB,E,uKARb,OACC,yBAAKlC,UAAU,OACd,kBAAC,EAAD,W,GAJcE,aCKEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4fd2f57f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../../css/Cell.css';\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleClick = this.handleClick.bind(this);\n\t}\n\n\thandleClick(evt) {\n\t\t// call up to the board to flip cells around this cell\n\t\tconsole.log(evt.target);\n\t\tthis.props.flipCellsAroundMe(evt.target.id);\n\t}\n\n\trender() {\n\t\tlet classes = 'Cell' + (this.props.isLit ? ' Cell-lit' : '');\n\n\t\treturn (\n\t\t\t<td\n\t\t\t\tid={this.props.id}\n\t\t\t\tclassName={classes}\n\t\t\t\tonClick={this.handleClick}\n\t\t\t/>\n\t\t);\n\t}\n}\n\nexport default Cell;\n","import React, { Component } from 'react';\nimport Cell from './Cell';\nimport '../../css/Board.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nexport default class Board extends Component {\n\tstatic defaultProps = {\n\t\tnrows: 5,\n\t\tncols: 5,\n\t\tchanceLightStartsOn: 0.25\n\t};\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t// TODO: set initial state\n\t\tthis.state = {\n\t\t\thasWon: false,\n\t\t\tboard: this.createBoard()\n\t\t};\n\t}\n\n\t/** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\tcreateBoard = () => {\n\t\tlet board = [];\n\t\tfor (let i = 0; i < this.props.nrows; i++) {\n\t\t\tlet r = [];\n\t\t\tfor (let i = 0; i < this.props.ncols; i++) {\n\t\t\t\tr.push(Math.random() > this.props.chanceLightStartsOn);\n\t\t\t}\n\t\t\tboard.push(r);\n\t\t}\n\t\treturn board;\n\t};\n\n\t/** handle changing a cell: update board & determine if winner */\n\n\tflipCellsAround = coord => {\n\t\tlet { ncols, nrows } = this.props;\n\t\tlet board = this.state.board;\n\t\tlet [ y, x ] = coord.split('-').map(Number);\n\n\t\tfunction flipCell(y, x) {\n\t\t\t// if this coord is actually on board, flip it\n\n\t\t\tif (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n\t\t\t\tboard[y][x] = !board[y][x];\n\t\t\t}\n\t\t}\n\t\tflipCell(y, x);\n\t\tflipCell(y + 1, x);\n\t\tflipCell(y - 1, x);\n\t\tflipCell(y, x + 1);\n\t\tflipCell(y, x - 1);\n\t\tthis.setState({\n\t\t\tboard,\n\t\t\thasWon: !board.some(row => row.includes(true))\n\t\t});\n\n\t\t// TODO: flip this cell and the cells around it\n\n\t\t// win when every cell is turned off\n\t\t// TODO: determine is the game has been won\n\n\t\t// this.setState({ board, hasWon });\n\t};\n\n\thandleFlips = coord => {\n\t\tthis.flipCellsAround(coord);\n\t};\n\n\t/** Render game board or winning message. */\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{this.state.hasWon ? (\n\t\t\t\t\t<h1>\n\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t<span className=\"neon-orange\">You</span>{' '}\n\t\t\t\t\t\t<span className=\"neon-blue\">Won</span>{' '}\n\t\t\t\t\t</h1>\n\t\t\t\t) : (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<span className=\"neon-orange\">Lights</span>\n\t\t\t\t\t\t\t<span className=\"neon-blue\">Out</span>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<table className=\"Board\">\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{this.state.board.map((r, idxY) => (\n\t\t\t\t\t\t\t\t\t<tr key={idxY}>\n\t\t\t\t\t\t\t\t\t\t{r.map((cell, idxX) => (\n\t\t\t\t\t\t\t\t\t\t\t<Cell\n\t\t\t\t\t\t\t\t\t\t\t\tkey={`${idxY}-${idxX}`}\n\t\t\t\t\t\t\t\t\t\t\t\tid={`${idxY}-${idxX}`}\n\t\t\t\t\t\t\t\t\t\t\t\tisLit={cell}\n\t\t\t\t\t\t\t\t\t\t\t\tflipCellsAroundMe={this.handleFlips}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport '../css/App.css';\nimport Board from './componets/Board';\n// import Cell from './componets/Cell';\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Board />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './js/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}